{"version":3,"sources":["App/pages/Login.js","App/pages/Register.js","App/pages/SpotOwner.js","App/pages/List.js","App/pages/Home.js","App/pages/NonSpotOwner.js","App/App.js","serviceWorker.js","index.js"],"names":["Login","className","Form","Group","controlId","Label","Control","type","placeholder","href","to","Button","variant","Component","Register","SpotOwner","List","props","getList","fetch","then","res","json","list","setState","state","this","length","map","item","index","key","Home","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3eb82a6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nclass Login extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron d-flex align-items-center min-vh-100\">\r\n        <div className=\"container\">\r\n          <h1 className=\"text-center mb-5\">Login</h1>\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" placeholder=\"Enter password\" />\r\n            </Form.Group>\r\n            <p className=\"text-center\">Not a member yet? Register <a href=\"http://localhost:3000/register\">here</a>.</p>\r\n            <div className=\"text-center mt-5\">\r\n              <Link to={'./login'}>\r\n                <Button variant=\"primary\" type=\"submit\">Login</Button>\r\n              </Link>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n\r\nclass Register extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron d-flex align-items-center min-vh-100\">\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center mb-5\">Register</h1>\r\n        <Form>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>Email address</Form.Label>\r\n            <Form.Control type=\"email\" placeholder=\"Enter email\" />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Choose a password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Enter password\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"formBasicCOnfirmPassword\">\r\n            <Form.Label>Confirm Password</Form.Label>\r\n            <Form.Control type=\"password\" placeholder=\"Re-enter password\" />\r\n          </Form.Group>\r\n          <p className=\"text-center\">Already a member? Login <a href=\"http://localhost:3000/login\">here</a>.</p>\r\n          <div className=\"text-center mt-5\">\r\n            <Link to={'./register'}>\r\n              <Button variant=\"primary\" type=\"submit\">Register</Button>\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\nexport default Register;\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nclass SpotOwner extends Component {\r\n    render() {\r\n        return (\r\n        <div className=\"jumbotron d-flex align-items-center min-vh-100\">\r\n            <div className=\"container\">\r\n                <div className=\"text-center\">\r\n                    <Button variant=\"info\" type=\"submit\">I don't need my spot today</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default SpotOwner;\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass List extends Component {\r\n  // Initialize the state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      list: []\r\n    }\r\n  }\r\n\r\n  // Fetch the list on first mount\r\n  componentDidMount() {\r\n    this.getList();\r\n  }\r\n\r\n  // Retrieves the list of items from the Express app\r\n  getList = () => {\r\n    fetch('http://localhost:5000/api/getList')\r\n    .then(res => res.json())\r\n    .then(list => this.setState({ list }))\r\n  }\r\n\r\n  render() {\r\n    const { list } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h2 className=\"mb-5\">Available spots:</h2>\r\n        {/* Check to see if any items are found*/}\r\n        {list.length ? (\r\n          <div>\r\n            {/* Render the list of items */}\r\n            {list.map((item, index) => {\r\n              return(\r\n                <div key={index} className=\"m-2\">\r\n                  <Button variant=\"info\" type=\"submit\">Reserve {item}</Button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <h4>None</h4>\r\n          </div>\r\n        )\r\n      }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport SpotOwner from './SpotOwner';\r\nimport NonSpotOwner from './NonSpotOwner';\r\n\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        const hasParkingSpot = true;\r\n\r\n        return hasParkingSpot ? <SpotOwner /> : <NonSpotOwner />;\r\n    }\r\n}\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport List from './List';\r\n\r\n\r\nclass NonSpotOwner extends Component {\r\n    render() {\r\n        return (\r\n        <div className=\"jumbotron d-flex align-items-center min-vh-100\">\r\n            <div className=\"container\">\r\n                <div className=\"text-center\">\r\n                    <List />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default NonSpotOwner;\r\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport '../App.css';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Home from './pages/Home';\n\nclass App extends Component {\n  render() {\n    const App = () => (\n      <div>\n        <Switch>\n          <Route exact path='/' component={Login}/>\n          <Route path='/login' component={Login}/>\n          <Route path='/register' component={Register}/>\n          <Route path='/home' component={Home}/>\n        </Switch>\n      </div>\n    )\n    return (\n      <Switch>\n        <App/>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}